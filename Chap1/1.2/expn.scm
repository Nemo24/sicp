(define (fast-expt b n) 
    (cond ((= n 0) 1)
          ((even? n) (square (fast-expt b (/ n 2)))) 
          (else (* b (fast-expt b (- n 1))))
    )
)

(define (even? n)
(= (remainder n 2) 0))

(define (fast-expt-iter b n) 
    (define (fe-iter b n accum)
    ;(bkpt 'b b 'n n 'accum accum)
    (cond ((= n 1) accum)
          ((even? n) ( fe-iter b (/ n 2) ( * (square b) accum))) 
          (else (fe-iter b ( - n 1) (* b accum)))
    )
    )
 (fe-iter b n 1)
)